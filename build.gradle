buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' };
        mavenCentral();
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+';
    }
}

apply plugin: 'net.minecraftforge.gradle';
apply plugin: 'maven-publish';
apply plugin: 'eclipse';

// Reads the variables from version.properties file.
// ext.configFile = file("version.properties");
// configFile.withReader {
//     Properties properties = new Properties();
//     properties.load(new FileInputStream(ext.configFile));
//     project.ext.config = new ConfigSlurper().parse(properties);
// }

// Tasks
task incrementBuildNumber; // Declaration of the Increasing Build Number task.
task clearBuildNumber; // Sets build number to 0.

task clearBuildNumber.doLast {
    def versionBuildFile = file('gradleBuildNumber.properties');
    if (versionBuildFile.canRead()) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(versionBuildFile));
        versionProperties['buildNumber'] = "0";
        versionProperties.store(versionBuildFile.newWriter(), null);
        println("BuildNumber has been set to 0");
    } else {
        println("Could not find 'gradleBuildNumber.properties' file! Ignoring setting to zero.");
    }
}

incrementBuildNumber.doFirst {
    def versionBuildFile = file('gradleBuildNumber.properties');
    if (versionBuildFile.canRead()) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(versionBuildFile));
        int newNumber = versionProperties['buildNumber'].toInteger() + 1;
        versionProperties['buildNumber'] = newNumber.toString();
        versionProperties.store(versionBuildFile.newWriter(), null);
        println("BuildNumber has incremented to: " + newNumber);
    } else
        println("Could not find 'gradleBuildNumber.properties' file! Ignoring increment.");
}

// Setting up the variables needed to build.
version = minecraftVersion + "-" + GetVersion();
group = "io.github.dotBlueShoes";
archivesBaseName = "packed_wool";


// Something i belive needed for Eclipse only.
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8;
compileJava { sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8; }


minecraft { // Setting up Minecraft run.
    mappings channel: 'snapshot', version: '20171003-1.12';
    runs {
        client {
            workingDirectory file('run');
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP';
            property 'forge.logging.console.level', 'debug';
        }
        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP';
            property 'forge.logging.console.level', 'debug';
        }
    }
}

dependencies { // Files needed to Compile our project. 
    minecraft "net.minecraftforge:forge:" + minecraftVersion + '-' + forgeVersion;
}

// This is required for mcmod.info to be loaded in first place and then reloaded with each build.
sourceSets { main { output.resourcesDir = output.classesDir; } }

processResources { // Proccesses mcmod.info file variables.
    // This will ensure that it will change on build.
    inputs.property 'mcversion', minecraftVersion;
    inputs.property 'version', version;
    inputs.property 'modid', archivesBaseName;

    // This replaces mcmod.info variables.
    from(sourceSets.main.resources.srcDirs) {
        include '**/mcmod.info';

        expand ([
            'mcversion': minecraftVersion,
            'version': version,
            'modid': archivesBaseName
        ]);
    }

    // Means copy everything else except the mcmod.info file.
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/mcmod.info';
    }

}


jar { // Manifest File. It's optional. But still it shows in the .jar file so let the values be.
    manifest {
        attributes([
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Implementation-Vendor" :"dotBlueShoes",
            "Specification-Vendor": "dotBlueShoes",
            "Implementation-Version": version, //"${version}",
            "Implementation-Title": name,
            "Specification-Title": archivesBaseName,
            "Specification-Version": "1"
        ]);
    }
}

// Functions 

// Acquires the version via newest git 'tag'/'release'. 
//  If it fails it gets an "err-version_b" + build_number.
String GetVersion() {
    try {
        return GetGitVersion();
    } catch (Exception ignored) {
        // Apperanlty this gets 3 exceptions therefore it's evaluated 3 times.
        println("Exception: Setting the version via Git failed!");
        return "err_version_" + GetBuildNumber();
    } 
}

// Calling git command to acquire major, minor, revision number from tag.
String GetGitVersion() { 
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git';
        args = [ 'describe', '--tags', '--long' ];
        standardOutput = outStream;
    }
    def fullVersion = outStream.toString().trim();
    def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/;
    def mj = matcher[0][1];
    def mn = matcher[0][2];
    def rv = matcher[0][3];
    def bd = GetBuildNumber();
    return "${mj}.${mn}.${rv}.${bd}".toString();
}

// Acquiring Build Number
String GetBuildNumber() { 
    def buildFile = file('gradleBuildNumber.properties');
    if (buildFile.canRead()) {
        Properties versionProperties = new Properties();
        versionProperties.load(new FileInputStream(buildFile));
        return versionProperties['buildNumber'].toString();
    } 
	return "error_no_buildFile";
}

// This mean that it's gonna only increment on the successful builds.
build.finalizedBy incrementBuildNumber;