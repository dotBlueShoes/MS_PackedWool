buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

// Reads the properties from build.properties file.
ext.configFile = file "build.properties"
configFile.withReader {
    def properties = new Properties()
    properties.load(it)
    project.ext.config = new ConfigSlurper().parse properties
}

version = "${config.minecraft_version}-${config.mod_version}"
group = "io.github.dotblueshoes.packed_wool"
archivesBaseName = "packed_wool"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
    compile files('libs/shears_lib-1.12.2-0.0.1.0.jar'/*, 'libs/Baubles-1.12-1.5.2.jar'*/)
}

// This is required for mcmod.info to be loaded in first place and then reloaded with each build.
// Its only unneeded in eclipse for some reason.
sourceSets { main { output.resourcesDir = output.classesDir } }

processResources {
    // This will ensure that it will change on build.
    inputs.property 'mcversion', project.config.minecraft_version
    inputs.property 'version', project.config.mod_version
    inputs.property 'modid', project.archivesBaseName

    // This replaces mcmod.info variables.
    from(sourceSets.main.resources.srcDirs) {
        include '**/mcmod.info'

        expand ([
            'minecraft_version': project.config.minecraft_version,
            'mod_version': project.config.mod_version,
            'modid': project.archivesBaseName
        ])
    }

    // Means copy everything else except the mcmod.info file.
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/mcmod.info'
    }

}


// Manifest File. I Guess it's not very needed. But still it shows in the .jar file so let the values be.
jar {
    manifest {
        attributes([
            "Specification-Title": "packed_wool",
            "Specification-Vendor": "dotblueshoes",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"dotbluesohes",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

/* Publishing */
// Example configuration to allow publishing using the maven-publish task //
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}